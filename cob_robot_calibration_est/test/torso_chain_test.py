#!/usr/bin/env python

import roslib
roslib.load_manifest('cob_robot_calibration_est')

import sys
import unittest
import rospy
import numpy
import math
from sensor_msgs.msg import JointState
from cob_robot_calibration_est.full_chain import FullChainCalcBlock, FullChainRobotParams
from cob_robot_calibration_est.robot_params import RobotParams
import yaml
from control_msgs.msg import JointTrajectoryControllerState
import tf

from numpy import *
import numpy

class chain_test():
    def __init__(self, name):
        path ="/u/robot/git/care-o-bot/src/cob_calibration/cob_calibration_config/cob3-8/"
        with open(path+"autogenerated/system.yaml", "r") as f:
            system =yaml.safe_load(f)
        with open(path+"user_defined/sensors.yaml", "r") as f:
            sensors =yaml.safe_load(f)
        r = RobotParams()
        r.configure(system)
        self.full_chain = FullChainRobotParams(sensors["camera_chains"][0]["chain"], sensors)
        self.full_chain.update_config(r)
        self.calc_block = self.full_chain.calc_block
        self.state=None
        self.name = name

    def callback(self, data):
        self.state = data
        self.state.header.frame_id = "torso_chain"

    def test(self):
        rospy.Subscriber("/torso_controller/state", JointTrajectoryControllerState, self.callback)
        listener = tf.TransformListener()

        rate = rospy.Rate(1.0)

        while not rospy.is_shutdown():
            if  self.state is None:
                rospy.logwarn("No Chainstate received")
                rate.sleep()
                continue
            try:
                (trans,rot) = listener.lookupTransform('/base_link', '/cam3d_link', rospy.Time(0))
                T1 = array(self.calc_block.fk([self.state]))
                print "AAA", T1
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                import traceback, sys
                traceback.print_exc(file=sys.stdout)
                continue
            m = array(tf.transformations.quaternion_matrix(rot))
            m[0:3,3]=trans
            print "--------------------%s----------------------"%self.name
            #print m
            #print T1
            #print "Diff: "
            #print m-T1
            #print numpy.linalg.norm(m-T1)
            # offset in mm
            trans_tf = array(m[0:3,3])
            trans_fc = array(T1[0:3,3])
            delta_trans = trans_tf - trans_fc
            delta = sqrt(sum(delta_trans**2))
            print "distance_diff: ",delta
            a_fc,_,_ = tf.transformations.rotation_from_matrix(T1)
            a_tf,_,_ = tf.transformations.rotation_from_matrix(m)
            print "angle_diff: ",(a_tf-a_fc)*180/pi


            rate.sleep()

if __name__ == '__main__':
    import rostest
    rospy.init_node('test_node')
    tc = chain_test("torso")
    tc.test()
